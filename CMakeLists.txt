cmake_minimum_required(VERSION 2.4.6)
include($ENV{ROS_ROOT}/core/rosbuild/rosbuild.cmake)

# Set the build type.  Options are:
#  Coverage       : w/ debug symbols, w/o optimization, w/ code-coverage
#  Debug          : w/ debug symbols, w/o optimization
#  Release        : w/o debug symbols, w/ optimization
#  RelWithDebInfo : w/ debug symbols, w/ optimization
#  MinSizeRel     : w/o debug symbols, w/ optimization, stripped binaries
#set(ROS_BUILD_TYPE RelWithDebInfo)

rosbuild_init()

#set the default path for built executables to the "bin" directory
set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)
#set the default path for built libraries to the "lib" directory
set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)

#uncomment if you have defined messages
rosbuild_genmsg()
#uncomment if you have defined services
#rosbuild_gensrv()

#common commands for building c++ executables and libraries
#rosbuild_add_boost_directories()
#rosbuild_link_boost(${PROJECT_NAME} thread)
find_package(cv_bridge)
find_package(image_transport)
find_package(OpenCV)
find_package(move_base_msgs)
find_package(actionlib)
find_package(tf)
include_directories(${OpenCV_INCLUDE_DIRS})
include_directories(src/lib)
rosbuild_add_library(${PROJECT_NAME} src/lib/GeometryTypes.cpp)
rosbuild_add_library(${PROJECT_NAME} src/lib/CameraCalibration.cpp)
rosbuild_add_library(${PROJECT_NAME} src/lib/Pattern.cpp)
rosbuild_add_library(${PROJECT_NAME} src/lib/PatternDetector.cpp)
rosbuild_add_library(${PROJECT_NAME} src/lib/Tracker.cpp)
target_link_libraries(${PROJECT_NAME} ${OpenCV_LIBRARIES})
rosbuild_add_executable(findObject src/findObject.cpp)
target_link_libraries(findObject ${OpenCV_LIBRARIES})
